echo "on" > /tmp/fanshim     - Turn fan on

andymc@ubuntu:~/fanshim-python/examples$ python3 manual.py
Traceback (most recent call last):
  File "manual.py", line 8, in <module>
    fanshim = FanShim()
  File "/usr/local/lib/python3.8/dist-packages/fanshim-0.0.4-py3.8.egg/fanshim/__init__.py", line 34, in __init__
RuntimeError: Not running on a RPi!
andymc@ubuntu:~/fanshim-python/examples$ 

andymc@ubuntu:~/fanshim-python/examples$ cd egg/fanshim
andymc@ubuntu:~/fanshim-python/examples/egg/fanshim$ ls
__init__.py  __pycache__
andymc@ubuntu:~/fanshim-python/examples/egg/fanshim$ grep RPi __init__.py
import RPi.GPIO as GPIO

andymc@ubuntu:~/fanshim-python/examples/egg/fanshim$ ls -al
total 20
drwxrwxr-x 3 andymc andymc 4096 Nov 25 20:01 .
drwxrwxr-x 4 andymc andymc 4096 Nov 25 20:01 ..
-rw-r--r-- 1 andymc andymc 4493 Jul 24 19:03 __init__.py
drwxrwxr-x 2 andymc andymc 4096 Nov 25 20:01 __pycache__
andymc@ubuntu:~/fanshim-python/examples/egg/fanshim$ cd 

<https://pypi.org/project/RPi.GPIO/>
 Note that this module is unsuitable for real-time or timing critical applications. This is because you can not predict when Python will be busy garbage collecting. It also runs under the Linux kernel which is not suitable for real time applications - it is multitasking O/S and another process may be given priority over the CPU, causing jitter in your program. If you are after true real-time performance and predictability, buy yourself an Arduino http://www.arduino.cc !

<https://www.raspberrypi.org/forums/viewtopic.php?t=88861>
simply requires changing the shebang in the Python file to -
#!/usr/bin/sudo python
Then you can execute ./myfile.py without the sudo
Except RPi.GPIO still gives the problem...
    GPIO.setup(self._pin_fancontrol, GPIO.OUT)
RuntimeError: Not running on a RPi!
